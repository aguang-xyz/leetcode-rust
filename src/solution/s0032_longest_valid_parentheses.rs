pub struct Solution {}

use std::cmp::max;

impl Solution {
    pub fn longest_valid_parentheses(s: String) -> i32 {
        let s: Vec<char> = s.chars().collect();

        let mut ans: i32 = 0;

        for i in 0..s.len() {
            let mut count_l: i32 = 0;
            let mut count_r: i32 = 0;

            for j in i..s.len() {
                match s[j] {
                    '(' => {
                        count_l += 1;
                    }

                    ')' => {
                        count_r += 1;
                    }

                    _ => {}
                }

                if count_l < count_r {
                    break;
                }

                if count_l == count_r {
                    ans = max(ans, count_l + count_r);
                }
            }
        }

        ans
    }
}

#[cfg(test)]
mod tests {
    use super::Solution;

    #[test]
    fn test_0032() {
        assert_eq!(Solution::longest_valid_parentheses(String::from("(()")), 2);
        assert_eq!(
            Solution::longest_valid_parentheses(String::from(")()())")),
            4
        );
        assert_eq!(Solution::longest_valid_parentheses(String::from("()")), 2);

        Solution::longest_valid_parentheses(String::from("(()(()))())))())))(((()(())))(()())((())((()()()(())))))()(())))())))(())())())((())))((((()))((())()))()(()()(())))())())))()))(()()((()(())()))((())(((()()()(((())((()()((())()))(()(())))()()))(()()))))))))((()())((((())(())())((())((()))))((()()(())()))()())((()((()))(()((())()()))((()()(()(()((())))()((())((()))()(()))())(()()())())()())(()()))))((()())(())()((()))(()(((())()(())))(())())))()))())))()()((()(((()(())(())))((()))())())())))))))((()(((())(())))(((())(()((()))))))())())()((()()((()()(())((()(((()((()())(()())()()()))()(()(()(()(((((()()))(((()))(()((()((((((()())(()))())((()))())()())()((()))())))()(()(()()))()((())())((()((())(()((())((()))))((((((((())()())))()))())((())())())()()())))))(()))()())(())(((((())((()))((()()())()))))(())))))(()(((((((())((()((()))((())((((())))))))))()))))))(()(())))))((()))(()))(()))((()((())((()(()((()(())(()()())())()))()())()(()))))(()())()()))(()())))(()))))((()()))(()()()())))))(())()()(((()()()()((())(()()())(((()(()((((()(())())))()(((()(()())))())())(()))()))())())(()()()()()())())(())((((())((((((((((()())()))())))())()))))))()(()((((((()))))))()())((()())())(()())()()()))(())()(()(()()))()))(((()(((())())()((())()))(()()((((())()))))(()(((())((())(())())()))((())(())())()(()()(())()())(()()))())()))()())()((()(((()((()()(()())))))()(()((((((((()())))(()(()))((((()()))))))))((()()(()(())(()())(((()))(())))))())(((((()((())())()())()()())()())()())))((()(()()))(((()()((())())((()(()(()())(((((()()(())))))())(())(())(()(()))(())()()))(()))(())()())((((())()())())))))()(())))()(())(())))((()()()((())()(())(()((((()))())())()(()()())()())()(()(()(()))(()(()()((())(()())))(((()(())()())(())()))(())()))())())((((()()(()))())))))))(((()))(()(()()))))))))((()))(()((()))(((((()()()))((((()()(()())((()(())))())(((()(()()))(((())()))(("));
    }
}
